#!/bin/bash
set -e
set -o pipefail

is_updated="false"

fail() {
  local message=$*
  echo -e "\n$message"
  return 1
}

update_proton_ge() {
  steam_comp_dir="$HOME/.local/share/Steam/compatibilitytools.d"
  steam_config_file="$HOME/.local/share/Steam/config/config.vdf"

  steam_proton_ge_dir="$steam_comp_dir/GE-Proton-latest"
  steam_proton_ge_version_file="$steam_proton_ge_dir/version"
  steam_proton_ge_digest_file="$steam_proton_ge_dir/digest"
  steam_proton_ge_compatibility_file="$steam_proton_ge_dir/compatibilitytool.vdf"

  installed_version=$(awk '{ print $2 }' "$steam_proton_ge_version_file") || echo ""
  installed_digest=$(cat "$steam_proton_ge_digest_file")

  echo -e "\nGetting latest version"
  latest_uri="https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases/latest"
  latest_release_json=$(curl -f "$latest_uri") || fail "No release found" || return 1
  latest_version=$(echo "$latest_release_json" | jq -r ".tag_name") || fail "No latest version found in release" || return 1
  latest_asset=$(echo "$latest_release_json" | jq -r -e ".assets.[] | select(.name == \"${latest_version}.tar.gz\")") || fail "No assets found in release" || return 1
  latest_digest=$(echo "$latest_asset" | jq -r ".digest") || fail "No digest found in release" || return 1
  latest_download_url=$(echo "$latest_asset" | jq -r ".browser_download_url") || fail "No download url found in release" || return 1

  if [ ! -d "$steam_proton_ge_dir" ]; then
    mkdir "$steam_proton_ge_dir"
  fi
  if [ ! -f "$steam_proton_ge_digest_file" ]; then
    touch "$steam_proton_ge_digest_file"
  fi

  echo -e "\nChecking versions"
  echo ""
  echo "Latest version: $latest_version"
  echo "Installed version: $installed_version"

  echo ""
  echo "Latest digest: $latest_digest"
  echo "Installed digest: $installed_digest"

  if [ "$latest_version" = "$installed_version" ] || [ "$latest_digest" = "$installed_digest" ]; then
    echo -e "\nNo version update found"
    return 0
  fi

  echo -e "\nUpdating $installed_version to $latest_version"

  latest_tar_file="$XDG_RUNTIME_DIR/$latest_version.tar.gz"
  curl -f -L -o "$latest_tar_file" "$latest_download_url" || return 1

  echo -e "\nTemp file in: $latest_tar_file"

  echo -e "\nExtracting archive to $steam_proton_ge_dir"
  rm -rf "${steam_proton_ge_dir:?}/*"
  tar -xf "$latest_tar_file" -C "$steam_proton_ge_dir" --strip-components=1

  # Change name to latest
  sed -i "s/\"display_name\"\s.*/\"display_name\" \"GE-Proton-latest\"/" "$steam_proton_ge_compatibility_file"
  # Update steam config to latest proton-ge version
  sed -i "s/\"GE-Proton.*\"/\"$latest_version\"/" "$steam_config_file"
  # Update digest to latest version
  echo "$latest_digest" >"$steam_proton_ge_digest_file"

  rm "$latest_tar_file"
  is_updated="true"
  echo -e "\nDone"
}

max_restart=5
restart_timeout=5

restart_counter=$((0))
status="failed"

while [ $restart_counter -lt $max_restart ] && [ "$status" = "failed" ]; do
  if update_proton_ge; then
    status="success"
    if [ "$is_updated" = "true" ]; then
      notify-send -a "Proton-GE updater" "Proton-GE update" "Proton-GE has been updated to $latest_version"
    fi
    break
  else
    restart_counter=$((restart_counter + 1))
    sleep $restart_timeout
    echo "Retry to update: $restart_counter"
  fi
done

if [ "$status" = "failed" ]; then
  echo -e "\nFailed to update Proton-GE"

  # Check for internet
  if ! wget -q --spider http://google.com; then
      echo "No internet connection"
  fi

  exit 1
fi
