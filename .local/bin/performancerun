#!/bin/bash

set -e
set -o pipefail

app_to_run="$*"
argument1="$1"

# Exit logic
exit_has_run="false"
exit_app() {
	exit_code=$?
	if [ "$exit_has_run" = "true" ]; then
		return 0
	fi
	exit_has_run="true"

	if ((exit_code > 0)); then
		echo "Sending notification"
		notify-send --app-name="Performancerun" "Performancerun error" "Error in setting performancerun for app '$app_to_run'"
		clear_locks >/dev/null 2>&1 || true
		set_default_profiles >/dev/null 2>&1 || true
		return 1
	fi

	if [ "$argument1" = "default" ]; then
		echo "Switching to default profiles:"
		clear_locks
		set_default_profiles
		return 0
	fi

	echo -e "\n\nReverting profiles:"
	remove_lock
	if [ "$(is_locked)" = "false" ]; then
		set_revert_profiles
	else
		echo "Performancerun still in use by another app"
	fi
	return 0
}
trap 'exit_app' INT EXIT ERR SIGTERM

lock_dir="$XDG_RUNTIME_DIR/performancerun"
lock_id_file="$lock_dir/$(date +%s)-($(basename "$app_to_run")).lock"
lock_previous_settings_file_name="previous_settings"
lock_previous_settings_file="$lock_dir/$lock_previous_settings_file_name"

# Some restart logic because the flatpak LACT daemon takes ages to load after login
max_restart=20
restart_timeout=1
restart_counter=$((0))
status="failed"
while [ $restart_counter -lt $max_restart ] && [ "$status" = "failed" ]; do
	if [ -S "/run/lactd.sock" ] || [ -d "$lock_dir" ]; then
		status="success"

		if [ -f "$lock_previous_settings_file" ]; then
			echo "{
				tuned_current_profile=$tuned_default_profile
				act_current_profile=$lact_default_profile
			}" >"$lock_previous_settings_file"
		fi
		break
	else
		restart_counter=$((restart_counter + 1))
		sleep $restart_timeout
	fi
done
if [ "$status" = "failed" ]; then
	echo "Error: Lact daemon or socket is not available" >&2
	exit 1
fi

tuned_default_profile="balanced-bazzite"
tuned_performance_profile="throughput-performance-bazzite"
tuned_current_profile=$(tuned-adm active | awk '{print $NF}')

lact_performance_profile="Performance"
lact_default_profile="Balanced"
lact_current_profile=$(flatpak run io.github.ilya_zlobintsev.LACT cli profile get | tail -n 1)

mkdir -p "$lock_dir"
if [ -f "$lock_previous_settings_file" ]; then
	# shellcheck disable=SC1090
	source "$lock_previous_settings_file"
fi

is_locked() {
	if [ ! -d "$lock_dir" ]; then
		echo "false"
		return
	fi

	if [ -n "$(ls -A "$lock_dir" -I $lock_previous_settings_file_name)" ]; then
		echo "true"
	else
		echo "false"
	fi
}

set_lock() {
	touch "$lock_id_file"
	if [ ! -f "$lock_previous_settings_file" ]; then
		echo "tuned_current_profile=$tuned_current_profile" >>"$lock_previous_settings_file"
		echo "lact_current_profile=$lact_current_profile" >>"$lock_previous_settings_file"
	fi
}

remove_lock() {
	if [ ! -f "$lock_id_file" ]; then return; fi

	rm "$lock_id_file"
	if [ "$(is_locked)" = "false" ]; then
		rm "$lock_previous_settings_file"
	fi
}

clear_locks() {
	if [ ! -d "$lock_dir" ]; then return; fi

	rm -rf "$lock_dir"
}

set_lact_profile() {
	local name="$*"
	flatpak run io.github.ilya_zlobintsev.LACT cli profile set "$name" >/dev/null
}

set_default_profiles() {
	echo "Switching to tuned profile: $tuned_default_profile"
	tuned-adm profile $tuned_default_profile

	echo "Switching to lact profile: $lact_default_profile"
	set_lact_profile $lact_default_profile
}

set_performance_profiles() {
	echo "Switching to tuned profile: $tuned_performance_profile"
	tuned-adm profile $tuned_performance_profile

	echo "Switching to lact profile: $lact_performance_profile"
	set_lact_profile $lact_performance_profile
}

set_revert_profiles() {
	echo "Switching to tuned profile: $tuned_current_profile"
	tuned-adm profile "$tuned_current_profile"

	echo "Switching to lact profile: $lact_current_profile"
	set_lact_profile "$lact_current_profile"
}

echo "Active tuned profile: $tuned_current_profile"
echo "Active lact profile: $lact_current_profile"
echo ""

if [ "$argument1" = "default" ]; then
	exit 0
fi

set_lock
set_performance_profiles

echo -e "Running application\n"
$app_to_run
