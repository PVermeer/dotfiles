#!/bin/bash

set -e
set -o pipefail

# Some restart logic because the flatpak LACT daemon takes ages to load on login
max_restart=20
restart_timeout=1
restart_counter=$((0))
status="failed"
while [ $restart_counter -lt $max_restart ] && [ "$status" = "failed" ]; do
	if systemctl is-active --quiet lactd.service; then
		status="success"
		break
	else
		restart_counter=$(($restart_counter + 1))
		sleep $restart_timeout
	fi
done
if [ "$status" = "failed" ]; then
	echo "Error: Lact daemon or socket is not available"
	exit 1
fi

argument1=$1
tuned_default_profile="balanced-bazzite"
tuned_performance_profile="throughput-performance-bazzite"
tuned_current_profile=$(tuned-adm active | awk '{print $NF}')

lact_performance_profile="Performance"
lact_default_profile="Balanced"
lact_current_profile=$(cd $HOME && echo "{\"command\": \"list_profiles\", \"args\": {\"include_state\": true }}" | ncat -U /run/lactd.sock | jq -r .data.current_profile)

app_to_run="$@"
lock_dir="$XDG_RUNTIME_DIR/performancerun"
lock_id_file="$lock_dir/$(date +%s)-($(basename "$app_to_run")).lock"
lock_previous_settings_file_name="previous_settings"
lock_previous_settings_file="$lock_dir/$lock_previous_settings_file_name"

mkdir -p "$lock_dir"
if [ -f "$lock_previous_settings_file" ]; then
	source "$lock_previous_settings_file"
fi

is_locked() {
	if [ ! -d "$lock_dir" ]; then
		echo "false"
		return
	fi

	if [ -n "$(ls -A "$lock_dir" -I $lock_previous_settings_file_name)" ]; then
		echo "true"
	else
		echo "false"
	fi
}

set_lock() {
	touch "$lock_id_file"
	if [ ! -f "$lock_previous_settings_file" ]; then
		echo "tuned_current_profile=$tuned_current_profile" >>$lock_previous_settings_file
		echo "lact_current_profile=$lact_current_profile" >>$lock_previous_settings_file
	fi
}

remove_lock() {
	if [ ! -f "$lock_id_file" ]; then return; fi

	rm "$lock_id_file"
	if [ "$(is_locked)" = "false" ]; then
		rm "$lock_previous_settings_file"
	fi
}

clear_locks() {
	if [ ! -d "$lock_dir" ]; then return; fi

	rm -rf "$lock_dir"
}

set_lact_profile() {
	local name="$@"
	local json="{\"command\": \"set_profile\", \"args\": {\"name\":\"$name\"}}"
	(cd $HOME && echo $json | ncat -U /run/lactd.sock &>/dev/null)
}

set_default_profiles() {
	echo "Switching to tuned profile: $tuned_default_profile"
	tuned-adm profile $tuned_default_profile

	echo "Switching to lact profile: $lact_default_profile"
	set_lact_profile $lact_default_profile
}

set_performance_profiles() {
	echo "Switching to tuned profile: $tuned_performance_profile"
	tuned-adm profile $tuned_performance_profile

	echo "Switching to lact profile: $lact_performance_profile"
	set_lact_profile $lact_performance_profile
}

set_revert_profiles() {
	echo "Switching to tuned profile: $tuned_current_profile"
	tuned-adm profile $tuned_current_profile

	echo "Switching to lact profile: $lact_current_profile"
	set_lact_profile $lact_current_profile
}

exit_app() {
	if [ "$argument1" = "default" ]; then
		echo "Switching to default profiles:"
		set_default_profiles
		clear_locks
		return 0
	fi

	echo "Reverting profiles:"
	remove_lock
	if [ "$(is_locked)" = "false" ]; then
		set_revert_profiles
	else
		echo "Performancerun still in use by another app"
	fi
	return 0
}
trap 'exit_app' INT EXIT ERR SIGTERM

echo "Active tuned profile: $tuned_current_profile"
echo "Active lact profile: $lact_current_profile"
echo ""

if [ "$argument1" = "default" ]; then
	exit 0
fi

set_lock
set_performance_profiles

echo -e "Running application\n"
$app_to_run
